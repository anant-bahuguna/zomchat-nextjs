{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/mnt/e/dev/nextjs/tailwind-next-1/components/layout/ChatSection.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useRef, useEffect } from \"react\";\nimport { ChatInputBox, ReceivedMessage, SentMessage } from \"../chat\";\nimport { animateScroll } from \"react-scroll\"; // message type = 0 for received messages\n// message type = 1 for sent messages\n\nvar ChatSection = function ChatSection() {\n  _s();\n\n  var _useState = useState([{\n    body: \"yeah hahaha\\n        some other comment\\n        why are you so awesome\",\n    type: 0\n  }, {\n    body: \"Here are the Tailwind Docs\",\n    type: 1\n  }, {\n    body: \"Does that result in the raw svg being inlined in\\n        the DOM?\",\n    type: 0\n  }, {\n    body: \"This is handy if you don't want to load SVG as a\\n        separate file.\",\n    type: 0\n  }, {\n    body: \"This is handly if You Don't want to load as a\\n        separate SVG file\",\n    type: 1\n  }, {\n    body: \"Exactly the same way as in Vue impulse\",\n    type: 0\n  }, {\n    body: \"I think it can slow down the page if there's too\\n        much bloat in the document.\\n        Compared to loading it externally.\",\n    type: 0\n  }, {\n    body: \"Comparison would be better if it's not also\\n        comparing an vector svg to a raster gif, it's a\\n        difference in rendering too.\",\n    type: 0\n  }]),\n      messages = _useState[0],\n      sendMessage = _useState[1];\n\n  var myRef = useRef(null);\n  useEffect(function () {\n    scrollToRef(myRef);\n  }, []);\n  useEffect(function () {\n    scrollToRef(myRef);\n  }, [messages.length]);\n  return (// <div className=\" flex-1 flex justify-between\">\n    __jsx(\"div\", {\n      className: \"bg-gray-750 flex-1 flex flex-col justify-between font-chat text-gray-200\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"text-sm text-gray-400 overflow-y-auto\",\n      id: \"xxx\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, messages.map(function (message, index) {\n      return message.type === 0 ? __jsx(ReceivedMessage, {\n        message: message,\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }) : __jsx(SentMessage, {\n        message: message,\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      });\n    })), __jsx(\"div\", {\n      ref: myRef,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), __jsx(ChatInputBox, {\n      messages: messages,\n      sendMessage: sendMessage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    })) // </div>\n\n  );\n};\n\n_s(ChatSection, \"OOg8bRPrRvMvFSsqeQRgnVqD3iE=\");\n\n_c = ChatSection;\nexport default ChatSection;\n\nvar scrollToRef = function scrollToRef(ref) {\n  window.scrollTo({\n    behavior: 'smooth',\n    top: ref.current.offsetTop\n  });\n};\n\nvar scrollToBottom = function scrollToBottom() {\n  animateScroll.scrollToBottom({\n    containerId: 'xxx'\n  });\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatSection\");","map":{"version":3,"sources":["/mnt/e/dev/nextjs/tailwind-next-1/components/layout/ChatSection.js"],"names":["useState","useRef","useEffect","ChatInputBox","ReceivedMessage","SentMessage","animateScroll","ChatSection","body","type","messages","sendMessage","myRef","scrollToRef","length","map","message","index","ref","window","scrollTo","behavior","top","current","offsetTop","scrollToBottom","containerId"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { ChatInputBox, ReceivedMessage, SentMessage } from \"../chat\";\n\nimport { animateScroll } from \"react-scroll\";\n\n// message type = 0 for received messages\n// message type = 1 for sent messages\n\nconst ChatSection = () => {\n    const [messages, sendMessage] = useState([\n        {\n            body: `yeah hahaha\n        some other comment\n        why are you so awesome`,\n            type: 0,\n        },\n        { body: `Here are the Tailwind Docs`, type: 1 },\n        {\n            body: `Does that result in the raw svg being inlined in\n        the DOM?`,\n            type: 0,\n        },\n        {\n            body: `This is handy if you don't want to load SVG as a\n        separate file.`,\n            type: 0,\n        },\n        {\n            body: `This is handly if You Don't want to load as a\n        separate SVG file`,\n            type: 1,\n        },\n        { body: \"Exactly the same way as in Vue impulse\", type: 0 },\n        {\n            body: `I think it can slow down the page if there's too\n        much bloat in the document.\n        Compared to loading it externally.`,\n            type: 0,\n        },\n        {\n            body: `Comparison would be better if it's not also\n        comparing an vector svg to a raster gif, it's a\n        difference in rendering too.`,\n            type: 0,\n        },\n    ]);\n\n    const myRef = useRef(null);\n    useEffect(() => {\n        scrollToRef(myRef);\n    }, []);\n    useEffect(() => {\n        scrollToRef(myRef);\n    }, [messages.length]);\n\n    return (\n        // <div className=\" flex-1 flex justify-between\">\n        <div className=\"bg-gray-750 flex-1 flex flex-col justify-between font-chat text-gray-200\">\n            <div className=\"text-sm text-gray-400 overflow-y-auto\" id='xxx'>\n                {messages.map((message, index) =>\n                    message.type === 0 ? (\n                        <ReceivedMessage message={message} key={index} />\n                    ) : (\n                        <SentMessage message={message} key={index} />\n                    )\n                )}\n            </div>\n            <div ref={myRef}></div>\n            <ChatInputBox messages={messages} sendMessage={sendMessage} />\n        </div>\n        // </div>\n    );\n};\n\nexport default ChatSection;\n\nconst scrollToRef = (ref) => {\n    window.scrollTo({ behavior: 'smooth', top: ref.current.offsetTop })\n};\n\nconst scrollToBottom = () => {\n    animateScroll.scrollToBottom({\n      containerId: 'xxx'\n    });\n}"]},"metadata":{},"sourceType":"module"}